using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Media.Animation;
using System.Windows.Navigation;
using System.IO;
using IqdbApi;
using XamlAnimatedGif;
using System.ComponentModel;
using Meta.Vlc;


// Tagger Software
// By Chris Wendel
// Used for tagging images and savings tags to a Database

namespace Tagger
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        //Relative Constants
        private static string appfilelocation = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), "Tagger");
        private static string appfolderpath = System.Reflection.Assembly.GetExecutingAssembly().Location;
        private static string ResourceLocation = Path.Combine(Directory.GetParent(appfolderpath).Parent.FullName, "..", "Resources");
        private string settingsfile = Path.Combine(appfilelocation, "taggersettings.xml");
        private string emptyrating = Path.Combine(ResourceLocation, "starEmpty.png");
        private string fullrating = Path.Combine(ResourceLocation, "starFull.png");

        //Declarations
        BitmapImage ImageInstance;  //Container used to display image
        DirectoryInfo DI;   //Info on Directory holding images
        FileInfo currentImage;  //Infor on Image being displayed
        List<FileInfo> FI;  //Info array for all desired files in directory 
        Random shuf = new Random(); //Random number generator for selecting a random image from Directory

        DatabaseUtil db = new DatabaseUtil();   //Database Utility Tools for accessing Dtabase
        DatabaseUtil.DBTable data;  //Databse Instance
        IQueryable<DatabaseUtil.SaveInfoTableDef> saveinfo; //saved state info

        XMLUtil xml = new XMLUtil();    //XML Utility tools for accessing settings file
        XMLUtil.SaveSettings settings = new XMLUtil.SaveSettings(); //settings class constaining settings info from xml settings file

        List<string> Tags = new List<string>(); //List to store tags in
        List<string> DisplayTags = new List<string>();  //List to store Tags for Tag Display in
        Stack<int> ImageHistory = new Stack<int>(); //Stack holding previous images displayed
        List<int> MediaFiles = new List<int>();
        List<float> EventList = new List<float>();

        Label Defaultlabel; //Label generated when Tag Add Textbox contains anything that doesn't match up with any tags in Tags table
        Label SelectedLabel;    //Label that has focus
        Label PreviousLabel;    //Label before that one that has focus
        int LabelIndex = 0; //index of labels generated by Tag search 

        string DirectoryPath = "";  //Location of image directory               
        
        string currentImageName = "";   //file name of displayed image
        short currentImageWidth = 0;    //Width of displayed image
        short currentImageHeight = 0;   //Height of displayed image
        int currentImageIndex = 0;  //Index of displayed image in File info array     
        
        //Settings 
        
        bool AlreadyHasTag = false; //Inidcator flag on wether the displayed image already has the tag being tried to add to it
        int ImagesTaggedfromCurrentDirectory = 0;   //Count of images that have been tagged from the current directory in previous runs
        int ImagesTaggedCurrentRun = 0; //Count of images tagged in the current run
        short Rating = 0;   //rating of the image
        bool imagetagged = false;   //Indicator flag for knowing if image has info in database at all
        string currentprofile = "def";
        bool mouseovermedia;
        DispatcherTimer mousewheeldonetimer = new DispatcherTimer();
        DispatcherTimer IQDBTimer = new DispatcherTimer();
        int mousewheelcounter = 0;
        int deletedimages = 0;
        
        int mediafilesindex = 0;
        bool waitingforresults = false;
        int IQDBscoreQualifier = 60;
        bool closewithoutsaving = false;
        bool mediaopened = false;
        bool updatingmedia = false;
        List<string> SearchResults = new List<string>();
        bool MediaIsVideo = false;
        bool cycleVideo = false;
        bool IQDBLoopRunning = false;
        int EventIndex = 0;

        string[] allTypes;
        string[] videoTypes;
        string[] imageTypes;

        IIqdbClient api = new IqdbClient();
        IqdbApi.Models.SearchResult searchResults;

        public MainWindow()
        {
            InitializeComponent();            
        }       

        #region Initilization

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            //Don't show image icon in windows taskbar           
            Application.Current.MainWindow.ShowInTaskbar = false;
            mousewheeldonetimer.Interval = new TimeSpan(0, 0, 0, 0, 500);
            mousewheeldonetimer.Tick += new EventHandler(MouseWheel_Done);
            IQDBTimer.Interval = new TimeSpan(0, 0, 15);
            IQDBTimer.Tick += new EventHandler(IQDB_Tick);

            TagAdd.Focus();
            Defaultlabel = DefaultTag;
            DisplayTags.Clear();
            ImageHistory.Clear();

            //Load settings information for the default profile for the current run
            LoadProfile();       
            
        }

        private void LoadProfile()
        {
            if (File.Exists(settingsfile))
            {
                settings = xml.LoadDefaultProfile();
            }
            else
            {
                settings.DBLocation = "null";
                settings.ViewCat = false;
                settings.RepeatShuffle = false;
                settings.Shuffle = true;
                settings.Slideshowinterval = 3;
                settings.ViewCat = false;
                settings.Volume = 30;
                settings.ImageFileTypes = ".png,.jpg,.jpeg,.bmp,.gif,";
                settings.VideoFileTypes = ".mp4,.wmv,.avi,.mpg,.mkv,.flv,.webm,";
                //settings.Png = true;
                //settings.Jpg = true;
                //settings.Jpeg = true;
                //settings.Bmp = true;
                //settings.Gif = true;
                //settings.Mp4 = true;
                //settings.Wmv = true;
                //settings.Avi = true;
                //settings.Mpg = true;
                //settings.Mkv = true;
                settings.Mousedisappeardelay = 4;
                settings.VisibleNav = true;
                if (Directory.Exists(appfilelocation))
                {
                    xml.CreateFile(settings, currentprofile);
                }
                else
                {
                    Directory.CreateDirectory(appfilelocation);
                    xml.CreateFile(settings, currentprofile);
                }
                
            }            
            
            currentprofile = settings.Profile;            
            
            if (settings.DBLocation != "null")
            {
                data = db.ConnectToDatabase(settings.DBLocation);
            }
            else
            {
                NewDatabase NDB = new NewDatabase();
                NDB.ShowDialog();
                DirectoryPath = NDB.IDirectory;
                settings.DBLocation = NDB.Dbfile;
                currentprofile = NDB.Profilename;
                xml.SaveDefaultFile(settings, currentprofile);
                data = db.ConnectToDatabase(NDB.Dbfile);
            }

            this.Title = "PPD - " + currentprofile;
            UpdateProfs();
            

            //Load save state from the database (Image directory, last displayed image index, Tagged Images count)
            
            saveinfo = db.LoadState(data, currentprofile);
            if (saveinfo.Count() > 0)
            {
                DirectoryPath = saveinfo.First().Directory;
                currentImageName = saveinfo.First().FileName;
                
            }
            ImagesTaggedfromCurrentDirectory = db.GetImageTaggedCount(data, DirectoryPath);
            UpdateDirectories();

            //Load settings
            LoadSettings();

            GetFiles(DirectoryPath);
            cycleVideo = false;
            UpdateImage();
            UpdateTagDisplay();
        }

        private void LoadSettings()
        {
            if (File.Exists(settingsfile))
            {
                settings = xml.LoadDefaultProfile();
            }
            categories.Text = (settings.ViewCat ? "Hentai vs IRL\n -Ecchi\n -Furry\n -Anthro\nCore\n -Hardcore\n -Softcore\n -NonNude\nRace\nBoob Size\nNipple Type\nSex\nFetish\nBody Type\nHair Color, Length, Style\nClothing\nAccessories\nPubic Hair\nSkin Color\nVisbile Genetalia\n -Clitoris\n -Ass\n -Vagina\n -Asshole\n -Boobs\n -Cleavage\nBody Features\n -Hips\n -Back\n -Open Mouth\n -Tongue\n -Closed Eyes\n -Waist\nActions\nEye Color\nLocation\nArtist\nPublisher\nPosition/Pose\nRule 34\nGirl\nMood\nOther\n -Cute\n -On/Off\n -Smiling\n -Smoking\n -Cosplay\n -Blushing" : "");
            Volume.Value = settings.Volume;
            if (!settings.VisibleNav) { Hidenav(true); }
        }
        
        //Update Profile Selection Menu Items
        private void UpdateProfs()
        {
            //Clear Any Profile Menu Items
            ChangeProfile.Items.Clear();
            //Loop through profiles in XML Save Information
            foreach (string prof in xml.GetProfiles())
            {   
                //Create new Menu Item with Profile Name as Header
                MenuItem profs = new MenuItem() { Header = prof, Icon = (prof == currentprofile ? "->" : "") };
                //Give newly created Menu Item a Click Event 
                profs.Click += new RoutedEventHandler(ChangeProfileExecuted);
                //Add newly created menu item to Change Profile Menu
                ChangeProfile.Items.Add(profs);
            }
        }

        private void UpdateDirectories()
        {
            ChangeDirectory.Items.Clear();
            foreach (string prof in db.GetDirectories(data, currentprofile))
            {
                MenuItem profs = new MenuItem() { Header = prof, Icon = (prof == DirectoryPath ? "->" : "") };
                profs.Click += new RoutedEventHandler(ChangeDirectoryExecuted);
                ChangeDirectory.Items.Add(profs);
            }
        }

        //Load files from specified Directory
        private void GetFiles(string path)
        {
            //Load Directory Information
            DI = new DirectoryInfo(path);
            string fileTypes = settings.ImageFileTypes + settings.VideoFileTypes;
            allTypes = fileTypes.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            videoTypes = settings.VideoFileTypes.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            imageTypes = settings.ImageFileTypes.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            //Load files from directory that have an extensions of bmp, jpeg, jpg, png, gif, mp4, mpg, mkv, avi, wmv, flv, webm
            FI = DI.GetFiles("*.*").Where(s => fileTypes.Contains(s.Extension)).ToList();
            //Sort files by creation time
            FI = FI.OrderBy(f => f.LastWriteTime).ToList();
            //Set ProgressBar Max Value to Number of Files
            DirectoryProgress.Maximum = FI.Count;
            //Set ProgressBar Value to Number of Files that are Tagged
            DirectoryProgress.Value = ImagesTaggedfromCurrentDirectory;
            //Calulate ProgressBar Label
            DirectoryProgress.Tag = (ImagesTaggedfromCurrentDirectory).ToString() + "/" + FI.Count.ToString();

            currentImageIndex = FI.IndexOf(FI.Where(x => x.Name == currentImageName).FirstOrDefault());
            if(currentImageIndex < 0)
            {
                currentImageIndex = 0;
            }

            //Add Files that are Media Files(mp4, mpg, mkv, wmv, avi)
            foreach (FileInfo f in FI)
            {
                if (videoTypes.Contains(f.Extension))
                {
                    MediaFiles.Add(FI.IndexOf(f));
                }
            }

            var l = FI.Select(x => x.LastWriteTime.Date).Distinct().ToList();

            for(int p = 1; p <= l.Count-1; p++)
            {
                if (!l[p].Date.AddDays(-1).Equals(l[p - 1]))
                {
                    CalendarDateRange i = new CalendarDateRange(l[p - 1].AddDays(1), l[p].AddDays(-1));
                    Calendar.BlackoutDates.Add(i);
                }               
            }
            Calendar.BlackoutDates.Add(new CalendarDateRange(DateTime.MinValue, l[0].AddDays(-1)));
            if(!(l[l.Count-1].AddDays(1).Equals(DateTime.Now.Date) || l[l.Count - 1].Equals(DateTime.Now.Date)))
            {
                Calendar.BlackoutDates.Add(new CalendarDateRange(l[l.Count - 1].AddDays(1), DateTime.Now.Date));                
            }
            Calendar.BlackoutDates.Add(new CalendarDateRange(DateTime.Now.Date.AddDays(1), DateTime.MaxValue));
        }

        #endregion

        #region TagAddAreaFunction

        private void TagAdd_TextChanged(object sender, TextChangedEventArgs e)
        {
            //Remove Any colors from Tagg Add textbox
            TagAdd.ClearValue(TextBox.BackgroundProperty);
            //Check if Text box is not empty on TextChange
            if (TagAdd.Text != "")
            {
                //Empty Tags List
                Tags.Clear();
                //Populate Tags list with Tags from Database that contain any text that matches what in the Tag Add text box
                Tags = db.GetTagsContaining(data, TagAdd.Text, 30);
                //Remove all controls in the Tag Add Stack panel except for the Textbox
                TagAddArea.Children.RemoveRange(1, TagAddArea.Children.Count - 1);
                //If No tags matched what was in Tag Add textbox
                if (Tags.Count == 0)
                {
                    //Replace N/A Label
                    TagAddArea.Children.Insert(1, Defaultlabel);
                }
                else
                {
                    Tags.Sort();
                    //Foreach Tag in Tags List add Label with Tag name to tag Add stackpanel
                    foreach (string t in Tags)
                    {
                        TagAddArea.Children.Insert(TagAddArea.Children.Count, new Label { Content = t, Focusable = true, Background = Brushes.LightGray, HorizontalAlignment = HorizontalAlignment.Stretch, Height = 26, HorizontalContentAlignment = HorizontalAlignment.Center, FontSize = 12, VerticalContentAlignment = VerticalAlignment.Center, Margin = new Thickness(5, 2, 5, 2) });

                    }
                    foreach (UIElement x in TagAddArea.Children)
                    {
                        if (x is Label)
                        {
                            x.PreviewKeyDown += new KeyEventHandler(Label_Chosen);
                        }

                    }
                }
            }
            else
            {
                //If Text box is Empty Remove all Labels and put back N/A Label
                TagAddArea.Children.RemoveRange(1, TagAddArea.Children.Count - 1);
                TagAddArea.Children.Insert(1, Defaultlabel);
            }

        }

        private void TagAdd_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Return)
            {
                LabelIndex = 0;
                if (TagAdd.Text != "" || TagAdd.Text != "N/A")
                {
                    AddTag(TagAdd.Text);
                }
                e.Handled = true;
            }
            else if (e.Key == Key.Down)
            {
                LabelIndex += 1;
                if (TagAddArea.Children.Count - 1 < LabelIndex)
                {
                    LabelIndex = TagAddArea.Children.Count - 1;
                }
                SelectedLabel = (Label)TagAddArea.Children[LabelIndex];
                SelectedLabel.Background = Brushes.LightBlue;
                e.Handled = true;
                SelectedLabel.Focus();
            }
            else if (e.Key == Key.Tab)
            {
                SelectedLabel = (Label)TagAddArea.Children[1];
                TagAdd.Text = (string)SelectedLabel.Content;
                TagAdd.SelectionStart = TagAdd.Text.Length;
                e.Handled = true;
            }
        }

        private void Label_Chosen(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Return)
            {
                TagAdd.Text = SelectedLabel.Content.ToString();
                TagAdd.SelectionStart = TagAdd.Text.Length;
                LabelIndex = 0;
                AddExistingTag(TagAdd.Text);
                e.Handled = true;
                TagAdd.Focus();
            }
            else if (e.Key == Key.Down)
            {
                LabelIndex += 1;
                if (TagAddArea.Children.Count - 1 < LabelIndex)
                {
                    LabelIndex = TagAddArea.Children.Count - 1;
                }
                SelectedLabel = (Label)TagAddArea.Children[LabelIndex];
                if (LabelIndex > 1)
                {
                    PreviousLabel = (Label)TagAddArea.Children[LabelIndex - 1];
                    PreviousLabel.Background = Brushes.LightGray;
                }
                SelectedLabel.Background = Brushes.LightBlue;
                e.Handled = true;
                SelectedLabel.Focus();
            }
            else if (e.Key == Key.Up)
            {
                LabelIndex -= 1;
                if (LabelIndex < 1)
                {
                    LabelIndex = 0;
                    TagAdd.Focus();
                }
                else
                {
                    SelectedLabel = (Label)TagAddArea.Children[LabelIndex];
                }
                if (LabelIndex < TagAddArea.Children.Count - 1)
                {
                    PreviousLabel = (Label)TagAddArea.Children[LabelIndex + 1];
                    PreviousLabel.Background = Brushes.LightGray;
                }
                if (LabelIndex != 0)
                {
                    SelectedLabel.Background = Brushes.LightBlue;
                    SelectedLabel.Focus();
                }
                e.Handled = true;

            }
            else if (e.Key == Key.Tab)
            {
                SelectedLabel.Background = Brushes.LightGray;
                TagAdd.Text = (string)SelectedLabel.Content;
                TagAdd.SelectionStart = TagAdd.Text.Length;
                LabelIndex = 0;
                e.Handled = true;
                TagAdd.Focus();
            }
            else if (e.Key == Key.Delete)
            {
                MessageBoxResult check = MessageBox.Show("Are you sure you Want to Delete this Tag?", "Delete?", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                if (check == MessageBoxResult.Yes)
                {
                    db.DeleteTag(data, SelectedLabel.Content.ToString());
                    TagAdd.Text = "";
                }
                e.Handled = true;
                TagAdd.Focus();
            }
        }

        #endregion

        #region AddingTags

        private void ImageTag(string TagName)
        {
            if ((bool)db.IsFileinImageData(data, currentImageName))
            {
                db.AddTagtoImageData(data, currentImageName, TagName);
                UpdateTagDisplay();
            }
            else
            {
                ImagesTaggedCurrentRun += 1;
                DirectoryProgress.Value = ImagesTaggedfromCurrentDirectory + ImagesTaggedCurrentRun;
                DirectoryProgress.Tag = (ImagesTaggedfromCurrentDirectory + ImagesTaggedCurrentRun).ToString() + "/" + FI.Count.ToString();
                db.AddtoImageData(data, currentImageName, DirectoryPath, Rating, TagName, 1, currentImageWidth, currentImageHeight, currentImage.LastWriteTime, currentImage.Extension, currentImage.Length);
                UpdateTagDisplay();
            }
        }

        private void AddTag(string TagName)
        {
            //check if Tags table has tag if not add it and increment count            
            if (db.TagExists(data, TagName))
            {
                AddExistingTag(TagName);
            }
            else
            {
                //Add Tag to Tag Table
                db.AddtoTags(data, TagName);

                //add Tag to new tag column in image table
                ImageTag(TagName);
                TagAdd.Text = "";

            }            
        }

        private void AddExistingTag(string TagName)
        {
            //Check if tag is already added for image, make textbox background red if so
            DisplayTags.Clear();
            DisplayTags = db.GetImageTags(data, currentImageName);
            if (DisplayTags.Count > 0)
            {
                foreach (string tag in DisplayTags)
                {
                    if (tag == TagName)
                    {
                        AlreadyHasTag = true;
                        break;
                    }
                    else
                    {
                        AlreadyHasTag = false;
                    }
                }
            }

            if (AlreadyHasTag)
            {
                TagAdd.Background = Brushes.LightPink;
            }
            else
            {
                //increment tag count                
                db.UpdateTagsCount(data, TagName, true);

                //add Tag to new tag column in image table
                ImageTag(TagName);
                TagAdd.Text = "";
            }

        }

        private void AddEvent()
        {
            
            if((bool)db.IsFileinImageData(data, currentImageName))
            {
                db.AddTagtoImageData(data, currentImageName, "Event: " + EventName.Text + "|" + EventPosition.Text);
                UpdateTagDisplay();                
            }
            else
            {
                ImagesTaggedCurrentRun += 1;
                DirectoryProgress.Value = ImagesTaggedCurrentRun + ImagesTaggedfromCurrentDirectory;
                DirectoryProgress.Tag = (ImagesTaggedfromCurrentDirectory + ImagesTaggedCurrentRun).ToString() + "/" + FI.Count.ToString();
                db.AddtoImageData(data, currentImageName, DirectoryPath, Rating, "Event: " + EventName.Text + "|" + EventPosition.Text, 1, currentImageWidth, currentImageHeight, currentImage.LastWriteTime, currentImage.Extension, currentImage.Length);
                //db.AddtoImageTags(data, currentImageName, 1, "Event: " + EventName.Text + "|" + EventPosition.Text, DirectoryPath);
                UpdateTagDisplay();
            }
            EventName.Text = "";
            EventPosition.Text = "";
        }
        
        private void AddRating(short rating)
        {
            RatingVisuals(rating);
            Rating = rating;
            if ((bool)db.IsFileinImageData(data, currentImageName))
            {
                db.UpdateRating(data, currentImageName, Rating);
                UpdateTagDisplay();
            }
            else
            {
                ImagesTaggedCurrentRun += 1;
                DirectoryProgress.Value = ImagesTaggedfromCurrentDirectory + ImagesTaggedCurrentRun;
                DirectoryProgress.Tag = (ImagesTaggedfromCurrentDirectory + ImagesTaggedCurrentRun).ToString() + "/" + FI.Count.ToString();
                db.AddtoImageData(data, currentImageName, DirectoryPath, Rating, "", 0, currentImageWidth, currentImageHeight, currentImage.LastWriteTime, currentImage.Extension, currentImage.Length);
                UpdateTagDisplay();
            }                   
            TagAdd.Focus();
        }

        #endregion        

        #region UpdateUI

        //Load Image or Media into Media Area
        private void UpdateImage()
        {
            updatingmedia = true;
            EventList.Clear();
            //Collapse Event Controls Area
            EventControls.Visibility = Visibility.Collapsed;
            //If media is playing
            if (PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                //Stop the media
                PreviewMedia.Stop();
                VideoProgress.Value = 0;
            }
            mediaopened = false;
            //Collect Garbage - Helps keep program running smoothly
            GC.Collect();
            //Get Current iMage File Info from File info List
            try
            {
                currentImage = FI[currentImageIndex];
            }
            //If theres an error
            catch (Exception)
            {
                //Load File First Image File info
                currentImageIndex = ImageHistory.Pop();
                currentImage = FI[currentImageIndex];
            }
            //Set current image name variable, FileName Label, and File Number 
            currentImageName = currentImage.Name;
            FileName.Content = currentImageName;
            FileNumber.Content = (currentImageIndex + 1).ToString() + " :";
            FileDate.Content = currentImage.LastWriteTime.ToShortDateString();
            Calendar.DisplayDate = currentImage.LastWriteTime;
            Calendar.SelectedDate = currentImage.LastWriteTime;            
            if (db.GetBetteronBooru(data, currentImageName))
            {
                BetterResOnBooru.Visibility = Visibility.Visible;
            }
            else
            {
                BetterResOnBooru.Visibility = Visibility.Collapsed;
            }

            int bscore = db.GetBooruScore(data, currentImageName);
            if(bscore < 1)
            {
                BooruScore.Visibility = Visibility.Collapsed;
            }
            else if (bscore < 60)
            {
                BooruScore.Visibility = Visibility.Visible;
                BooruScore.Foreground = Brushes.Red;
                BooruScore.Content = bscore.ToString();
            }
            else
            {
                BooruScore.Visibility = Visibility.Visible;
                BooruScore.Foreground = Brushes.Black;
                BooruScore.Content = bscore.ToString();
            }
            
            if (currentImage.Length > 1048576)
            {
                FileSize.Content = (currentImage.Length / 1048576).ToString() + " Mb";
            }
            else if (currentImage.Length > 1024)
            {
                FileSize.Content = (currentImage.Length / 1024).ToString() + " kb";
            }
            else
            {
                FileSize.Content = currentImage.Length.ToString();
            }
            if (videoTypes.Contains(currentImage.Extension))
            {
                PreviewImage.Visibility = Visibility.Hidden;
                ImageBorder.Visibility = Visibility.Hidden;
                MediaBorder.Visibility = Visibility.Visible;
                PreviewMedia.Visibility = Visibility.Visible;
                Play.Visibility = Visibility.Visible;
                Pause.Visibility = Visibility.Hidden;
                Pause2.Visibility = Visibility.Hidden;
                EventExpander.Visibility = Visibility.Visible;
                currentImageWidth = (short)PreviewMedia.ActualHeight;
                currentImageHeight = (short)PreviewMedia.ActualWidth;
                FileHeight.Content = "H: " + PreviewMedia.ActualHeight.ToString();
                FileWidth.Content = "W: " + PreviewMedia.ActualHeight.ToString();
                PreviewMedia.LoadMedia(new Uri(currentImage.FullName));              
                MediaIsVideo = true;

            }
            else if (currentImage.Extension.Equals(".gif"))
            {
                PreviewImage.Visibility = Visibility.Visible;
                PreviewMedia.Visibility = Visibility.Hidden;
                ImageBorder.Visibility = Visibility.Visible;
                MediaBorder.Visibility = Visibility.Hidden;
                EventExpander.Visibility = Visibility.Collapsed;
                AnimationBehavior.SetSourceUri(PreviewImage, new Uri(currentImage.FullName));
                //currentImageWidth = (short)PreviewImage.g
                //currentImageHeight = (short)ImageInstance.PixelHeight;
                //FileHeight.Content = "H: " + currentImageHeight.ToString();
                //FileWidth.Content = "W: " + currentImageWidth.ToString();
                PreviewImage.Stretch = Stretch.Uniform;
                MediaIsVideo = false;
            }
            else
            {
                PreviewImage.Visibility = Visibility.Visible;
                PreviewMedia.Visibility = Visibility.Hidden;
                ImageBorder.Visibility = Visibility.Visible;
                MediaBorder.Visibility = Visibility.Hidden;
                EventExpander.Visibility = Visibility.Collapsed;
                ImageInstance = BitmapImageFromFile(currentImage.FullName, PreviewImage);
                currentImageWidth = (short)ImageInstance.PixelWidth;
                currentImageHeight = (short)ImageInstance.PixelHeight;
                FileHeight.Content = "H: " + currentImageHeight.ToString();
                FileWidth.Content = "W: " + currentImageWidth.ToString();
                PreviewImage.Source = ImageInstance;
                PreviewImage.Stretch = Stretch.Uniform;
                MediaIsVideo = false;
            }
            Rating = db.GetRating(data, currentImageName);
            RatingVisuals(Rating);
            LabelIndex = 0;
            TagAdd.Text = "";
            updatingmedia = false;
            EventIndex = 0;

        }

        private void UpdateTagDisplay()
        {
            //Clear Event Controls Bar of any children
            EventControls.Children.Clear();
            //Clear Display Tags List
            DisplayTags.Clear();
            //Update Display Tags List with Images Tags from Database
            DisplayTags = db.GetImageTags(data, currentImageName);
            //Remove Tags from DisplayTags area after Progress Bar and Separator
            TagDisplayArea.Children.RemoveRange(2, TagDisplayArea.Children.Count - 2);
            //If Image is Tagged
            if (DisplayTags.Count > 0)
            {
                //Flagged Image as tagged
                imagetagged = true;                
                //Add Tag Count Label to Tag Display Area
                string url = db.GetBooruURL(data, currentImageName);
                if (url != "" && url != null)
                {
                    Button urlbutt = new Button { Content = url, Focusable = true, Background = Brushes.LightGray, HorizontalAlignment = HorizontalAlignment.Stretch, FontSize = 12, VerticalContentAlignment = VerticalAlignment.Center, HorizontalContentAlignment = HorizontalAlignment.Center, Margin = new Thickness(5, 2, 5, 2), Height = 26, };
                    urlbutt.Click += new RoutedEventHandler(Urlbutt_Clicked);
                    TagDisplayArea.Children.Add(urlbutt);
                }
                else
                {
                    TagDisplayArea.Children.Add(new Label { Content = db.GetImageTagCount(data, currentImageName).ToString(), Focusable = true, Background = Brushes.LightGray, HorizontalAlignment = HorizontalAlignment.Stretch, FontSize = 12, VerticalContentAlignment = VerticalAlignment.Center, HorizontalContentAlignment = HorizontalAlignment.Center, Margin = new Thickness(5, 2, 5, 2), Height = 26 });
                }                
                //Loop through each tag in Display Tags List
                foreach (string tag in DisplayTags)
                {
                    //If Tag is an Event Tag (Format: "Event: EventName|Position")
                    if(tag.Contains("Event: "))
                    {
                        //Make Event Controls Area Visible
                        EventControls.Visibility = Visibility.Visible;
                        //Remove 'Event:' from Tags String
                        string tagname = tag.Remove(0, 7);
                        //Split remaining string at '|' 0:EventName, 1:Media Position
                        string[] others = tagname.Split('|');
                        //Create a button for the event with Tag Property as Position
                        Button event1 = new Button { Content = others[0], HorizontalContentAlignment = HorizontalAlignment.Center, Tag = others[1], Background = Brushes.LightGray, BorderBrush = Brushes.Transparent, Foreground = Brushes.Black, FontWeight = FontWeights.Bold, FontSize = 12, Height = 20};
                        if(float.TryParse(others[1], out float EventTime))
                        {
                            EventList.Add(EventTime);
                        }                        
                        //Add Event for event button
                        event1.Click += new RoutedEventHandler(EventExecuted);
                        //Add Button to Event Controls Area
                        EventControls.Children.Add(event1);

                    }
                    //If the Tag is NOT an empty string
                    else if (tag != "")
                    {
                        //Add A Label With the Tag Content to the Tag Display Area
                        TagDisplayArea.Children.Add(new Label { Content = tag, Focusable = true, Background = Brushes.LightGray, HorizontalAlignment = HorizontalAlignment.Stretch, Height = 26, HorizontalContentAlignment = HorizontalAlignment.Center, FontSize = 12, VerticalContentAlignment = VerticalAlignment.Center, Margin = new Thickness(5, 2, 5, 2) });
                    }
                }
            }
            //If There is not Tag for Image
            else
            {
                //Flag image as not tagged
                imagetagged = false;
            }

        }

        private static BitmapImage BitmapImageFromFile(string path, Image img)
        {
            var bi = new BitmapImage();

            using (var fs = new FileStream(path, FileMode.Open))
            {
                bi.BeginInit();
                bi.StreamSource = fs;
                bi.CacheOption = BitmapCacheOption.OnLoad;                
                bi.EndInit();
            }

            bi.Freeze();

            return bi;
        }

        private void RatingVisuals(int rating)
        {
            switch (rating)
            {
                case 1:
                    Rating1.Content = fullrating;
                    Rating2.Content = emptyrating;
                    Rating3.Content = emptyrating;
                    Rating4.Content = emptyrating;
                    Rating5.Content = emptyrating;
                    break;
                case 2:
                    Rating1.Content = fullrating;
                    Rating2.Content = fullrating;
                    Rating3.Content = emptyrating;
                    Rating4.Content = emptyrating;
                    Rating5.Content = emptyrating;
                    break;
                case 3:
                    Rating1.Content = fullrating;
                    Rating2.Content = fullrating;
                    Rating3.Content = fullrating;
                    Rating4.Content = emptyrating;
                    Rating5.Content = emptyrating;
                    break;
                case 4:
                    Rating1.Content = fullrating;
                    Rating2.Content = fullrating;
                    Rating3.Content = fullrating;
                    Rating4.Content = fullrating;
                    Rating5.Content = emptyrating;
                    break;
                case 5:
                    Rating1.Content = fullrating;
                    Rating2.Content = fullrating;
                    Rating3.Content = fullrating;
                    Rating4.Content = fullrating;
                    Rating5.Content = fullrating;
                    break;
                default:
                    Rating1.Content = emptyrating;
                    Rating2.Content = emptyrating;
                    Rating3.Content = emptyrating;
                    Rating4.Content = emptyrating;
                    Rating5.Content = emptyrating;
                    break;
            }
        }

        #endregion                               

        #region Media Player Controls

        private void PreviewMedia_LengthChanged(object sender, EventArgs e)
        {
            //PreviewMedia.Rate = 1.0F;
            if (PreviewMedia.Length.TotalSeconds < 10)
            {
                PreviewMedia.EndBehavior = Meta.Vlc.Wpf.EndBehavior.Repeat;
            }
            else
            {
                PreviewMedia.EndBehavior = Meta.Vlc.Wpf.EndBehavior.Stop;
            }
            mediaopened = true;
        }

        private void PreviewMedia_TimeChanged(object sender, EventArgs e)
        {
            var timeElapsed = PreviewMedia.Length.Subtract(PreviewMedia.Time);
            RemainingMediaTime.Text = timeElapsed.ToString("hh\\:mm\\:ss");
        }

        private void Volume_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            settings.Volume = (int)Volume.Value;
        }

        private void PreviewMedia_MouseEnter(object sender, MouseEventArgs e)
        {
            if (MediaIsVideo)
            {
                mouseovermedia = true;
                FullMediaControls.Visibility = Visibility.Visible;
                TagAdd.Focus();
            }            
        }
        private void PreviewMedia_MouseLeave(object sender, MouseEventArgs e)
        {
            if (MediaIsVideo)
            {
                mouseovermedia = false;
                FullMediaControls.Visibility = Visibility.Collapsed;
                TagAdd.Focus();
            }
        }              

        private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
        {
            if (mouseovermedia)
            {
                mousewheeldonetimer.Stop();
                mousewheeldonetimer.Interval = new TimeSpan(0, 0, 0, 0, 500);
                mousewheeldonetimer.Start();
                
                if(e.Delta > 0)
                {
                    mousewheelcounter++;
                }
                else
                {
                    mousewheelcounter--;
                }                
            }
        }

        private void MouseWheel_Done(object sender, EventArgs e)
        {
            mousewheeldonetimer.Stop();
            PreviewMedia.Position += (mousewheelcounter * 0.001F);
            mousewheelcounter = 0;
        }

        #endregion        

        #region CommandsEvents

        #region NavigationCommands
        private void NextFileExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            ImageHistory.Push(currentImageIndex);

            currentImageIndex += 1;
            if (currentImageIndex > FI.Count - 1)
            {
                currentImageIndex = 0;
            }
            cycleVideo = false;
            UpdateImage();
            UpdateTagDisplay();
            TagAdd.Focus();
        }

        private void NextFileCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void PrevFileExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            ImageHistory.Push(currentImageIndex);

            currentImageIndex -= 1;
            if (currentImageIndex < 0)
            {
                currentImageIndex = FI.Count - 1;
            }
            cycleVideo = false;
            UpdateImage();
            UpdateTagDisplay();
            TagAdd.Focus();
        }

        private void PrevFileCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void RandomFileExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            ImageHistory.Push(currentImageIndex);
            currentImageIndex = shuf.Next(0, FI.Count - 1);
            cycleVideo = false;
            UpdateImage();
            UpdateTagDisplay();
            e.Handled = true;
            TagAdd.Focus();
        }

        private void RandomFileCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void FirstFileExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            ImageHistory.Push(currentImageIndex);
            currentImageIndex = 0;
            cycleVideo = false;
            UpdateImage();
            UpdateTagDisplay();
            e.Handled = true;
            TagAdd.Focus();
        }

        private void FirstFileCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void LastFileExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            ImageHistory.Push(currentImageIndex);
            currentImageIndex = FI.Count - 1;
            cycleVideo = false;
            UpdateImage();
            UpdateTagDisplay();
            e.Handled = true;
            TagAdd.Focus();
        }

        private void LastFileCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void NextVideoExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            ImageHistory.Push(currentImageIndex);
            if (!MediaIsVideo || !cycleVideo)
            {
                for (int j = 0; j < MediaFiles.Count - 1; j++)
                {
                    if (currentImageIndex <= MediaFiles[j])
                    {
                        mediafilesindex = j;
                        break;
                    }
                }
            }
            else
            {
                mediafilesindex++;
            }            
            if (mediafilesindex > MediaFiles.Count - 1)
            {
                mediafilesindex = 0;
            }
            currentImageIndex = MediaFiles[mediafilesindex];
            cycleVideo = true;
            UpdateImage();
            UpdateTagDisplay();
            e.Handled = true;            
            TagAdd.Focus();
        }

        private void NextVideoCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void PrevVideoExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            ImageHistory.Push(currentImageIndex);
            if (!MediaIsVideo || !cycleVideo)
            {
                for (int j = MediaFiles.Count - 1; j > 0; j--)
                {
                    if (currentImageIndex >= MediaFiles[j])
                    {
                        mediafilesindex = j;
                        break;
                    }
                }
            }
            else
            {
                mediafilesindex--;
            }
            if (mediafilesindex < 0)
            {
                mediafilesindex = MediaFiles.Count - 1;
            }
            currentImageIndex = MediaFiles[mediafilesindex];
            cycleVideo = true;
            UpdateImage();
            UpdateTagDisplay();
            e.Handled = true;
            TagAdd.Focus();
        }

        private void PrevVideoCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void RandomVideoExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            ImageHistory.Push(currentImageIndex);
            mediafilesindex = shuf.Next(0, MediaFiles.Count - 1);
            currentImageIndex = MediaFiles[mediafilesindex];
            UpdateImage();
            UpdateTagDisplay();
            e.Handled = true;
            TagAdd.Focus();
        }

        private void RandomVideoCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void GotoHistoryExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            if (ImageHistory.Count > 0)
            {
                currentImageIndex = ImageHistory.Pop();
                UpdateImage();
                UpdateTagDisplay();
            }
            cycleVideo = false;
            e.Handled = true;
            TagAdd.Focus();
        }

        private void GotoHistoryCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        #endregion

            #region MainCommands
            private void NewDirectoryExecuted(object sender, ExecutedRoutedEventArgs e)
            {
                Save();
                using (var dialog = new System.Windows.Forms.FolderBrowserDialog())
                {
                    System.Windows.Forms.DialogResult result = dialog.ShowDialog();
                    DirectoryPath = dialog.SelectedPath;

                    GetFiles(DirectoryPath);
                    currentImageIndex = 0;
                    UpdateDirectories();
                    cycleVideo = false;
                    UpdateImage();
                    UpdateTagDisplay();
                    Save();
                }
            }

            private void NewDirectoryCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void ChangeDirectoryExecuted(object sender, RoutedEventArgs e)
            {
                MenuItem cdclick = (MenuItem)sender;
                if (cdclick.Header.ToString() != DirectoryPath)
                {
                    Save();
                    DirectoryPath = cdclick.Header.ToString();
                    GetFiles(DirectoryPath);

                    string filepath = db.LoadDirectory(data, currentprofile, DirectoryPath);
                    if(filepath == "")
                    {
                        currentImageIndex = 0;
                    }
                    else
                    {
                        currentImageIndex = FI.IndexOf(FI.Where(x => x.Name == filepath).First());
                    }                
                    ImagesTaggedfromCurrentDirectory = db.GetImageTaggedCount(data, DirectoryPath);
                    UpdateDirectories();
                    cycleVideo = false;
                    UpdateImage();
                    UpdateTagDisplay();
                    Save();
                }
            }

            private void ChangeDirectoryCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void CloseDirectoryExecuted(object sender, ExecutedRoutedEventArgs e)
            {

            }

            private void CloseDirectoryCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void NewProfileExecuted(object sender, ExecutedRoutedEventArgs e)
            {
                NewDatabase NDB = new NewDatabase();
                NDB.ShowDialog();
                if (!NDB.CanceledFlag)
                {
                    DatabaseUtil.DBTable data2 = db.ConnectToDatabase(Path.Combine(appfilelocation, NDB.Dbfile));
                    db.SaveState(data2, NDB.Profilename, NDB.IDirectory, "");
                    db.DisconnectFromDatabase(data2);
                    xml.AddProfile(NDB.Profilename);
                    UpdateProfs();
                }
            }

            private void NewProfileCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void ChangeProfileExecuted(object sender, RoutedEventArgs e)
            {
                MenuItem sender1 = (MenuItem)sender;
                Save();
                db.DisconnectFromDatabase(data);
                xml.ChangeDefaultprofile(sender1.Header.ToString());
                UpdateProfs();
                LoadProfile();
            }

            private void ChangeProfileCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void SaveExecuted(object sender, ExecutedRoutedEventArgs e)
            {
                Save();
            }

            private void SaveCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void UndoTagExecuted(object sender, ExecutedRoutedEventArgs e)
            {
                DisplayTags.Clear();
                DisplayTags = db.GetImageTags(data, currentImageName);
                if (DisplayTags.Count == 1)
                {
                    db.DeleteImageData(data, currentImageName);
                    UpdateTagDisplay();

                }
                else if (DisplayTags.Count > 1)
                {
                    string removedtag = DisplayTags[DisplayTags.Count - 1];
                    string tagstring = ";";
                    DisplayTags.Remove(DisplayTags[DisplayTags.Count - 1]);
                    foreach (string tags in DisplayTags)
                    {
                        tagstring = tagstring + tags + ";";
                    }
                    db.UpdateTagsCount(data, removedtag, false);
                    db.UpdateTaginImageData(data, currentImageName, tagstring);
                    db.DecrementImageDataTagCount(data, currentImageName);
                    UpdateTagDisplay();
                }
                TagAdd.Focus();
            }

            private void UndoTagCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void RenameFileExecuted(object sender, ExecutedRoutedEventArgs e)
            {
                UI.InputWindow RN = new UI.InputWindow("Enter a new filename for: " + Environment.NewLine + currentImageName + Environment.NewLine + "Do not include the extension.", "");
                RN.ShowDialog();
                if (RN.Response != "" && RN.Response != null)
                {
                    try
                    {
                        File.Move(currentImage.FullName, Path.Combine(currentImage.DirectoryName, RN.Response + currentImage.Extension));
                        db.Rename(data, currentImageName, RN.Response);
                        GetFiles(DirectoryPath);
                        cycleVideo = false;
                        UpdateImage();
                        UpdateTagDisplay();
                        Save();
                    }
                    catch (IOException)
                    {
                        MessageBox.Show("Cannot choose a filename already in use.");
                    }
                    TagAdd.Focus();
                }
            }

            private void RenameFileCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void MoveFileExecuted(object sender, ExecutedRoutedEventArgs e)
            {
                using (var dialog = new System.Windows.Forms.FolderBrowserDialog())
                {
                    System.Windows.Forms.DialogResult result = dialog.ShowDialog();
                    FI[currentImageIndex].CopyTo(dialog.SelectedPath + "\\" + currentImageName);
                    FI[currentImageIndex].Delete();
                    FI.Remove(currentImage);
                    deletedimages++;
                    cycleVideo = false;
                    UpdateImage();
                    UpdateTagDisplay();
                }
                TagAdd.Focus();
            }

            private void MoveFileCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void DeleteFileExecuted(object sender, ExecutedRoutedEventArgs e)
            {
                MessageBoxResult check = MessageBox.Show("Are you sure you Want to Delete this image?", "Delete?", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                if (check == MessageBoxResult.Yes)
                {
                    if (imagetagged)
                    {
                        db.DeleteImageData(data, currentImageName);
                    }
                    FI[currentImageIndex].Delete();
                    FI.Remove(currentImage);
                    deletedimages++;
                    cycleVideo = false;
                    UpdateImage();
                    UpdateTagDisplay();

                }
                TagAdd.Focus();
            }

            private void DeleteFileCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

            private void OpenFileLocationExecuted(object sender, ExecutedRoutedEventArgs e)
            {
                System.Diagnostics.Process.Start("explorer.exe", "/select," + Path.Combine(DirectoryPath, currentImageName));
            }

            private void OpenFileLocationCanExecute(object sender, CanExecuteRoutedEventArgs e)
            {
                if (e.Source is Control target)
                {
                    e.CanExecute = true;
                }
                else
                {
                    e.CanExecute = false;
                }
            }

        #endregion

            #region RatingCommands
        private void Rating1Executed(object sender, ExecutedRoutedEventArgs e)
        {
            AddRating(1);
            e.Handled = true;
            Rating1.IsChecked = false;
            TagAdd.Focus();
        }

        private void Rating1CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Rating2Executed(object sender, ExecutedRoutedEventArgs e)
        {
            AddRating(2);
            e.Handled = true;
            Rating2.IsChecked = false;
            TagAdd.Focus();
        }

        private void Rating2CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Rating3Executed(object sender, ExecutedRoutedEventArgs e)
        {
            AddRating(3);
            e.Handled = true;
            Rating3.IsChecked = false;
            TagAdd.Focus();
        }

        private void Rating3CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Rating4Executed(object sender, ExecutedRoutedEventArgs e)
        {
            AddRating(4);
            e.Handled = true;
            Rating4.IsChecked = false;
            TagAdd.Focus();
        }

        private void Rating4CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Rating5Executed(object sender, ExecutedRoutedEventArgs e)
        {
            AddRating(5);
            e.Handled = true;
            Rating5.IsChecked = false;
            TagAdd.Focus();
        }

        private void Rating5CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        #endregion

            #region VideoCommands
        private void PlayPauseExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            if (PreviewMedia.State != Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                Play.Visibility = Visibility.Hidden;
                Pause.Visibility = Visibility.Visible;
                Pause2.Visibility = Visibility.Visible;
                PreviewMedia.Play();              
            }
            else
            {
                Pause.Visibility = Visibility.Hidden;
                Pause2.Visibility = Visibility.Hidden;
                Play.Visibility = Visibility.Visible;
                PreviewMedia.Pause();
            }
        }

        private void PlayPauseCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && MediaIsVideo)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void StopExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            if (PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                Pause.Visibility = Visibility.Hidden;
                Pause2.Visibility = Visibility.Hidden;
                Play.Visibility = Visibility.Visible;
                PreviewMedia.Stop();
                mediatime.Text = "00:00:00";
                RemainingMediaTime.Text = "00:00:00";
                VideoProgress.Value = 0;
            }
        }

        private void StopCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void SkipForwardExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            float skipAmount = 0;
            if (PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                skipAmount = PreviewMedia.Position + 0.0333F;
                if (skipAmount < 1)
                {
                    PreviewMedia.Position = skipAmount;
                }
            }
        }

        private void SkipForwardCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void SkipBackExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            float skipAmount = 0;
            if (PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                skipAmount = PreviewMedia.Position - 0.0333F;
                if (skipAmount > 0)
                {
                    PreviewMedia.Position = skipAmount;
                }
                else
                {
                    PreviewMedia.Position = 0;
                }
            }
        }

        private void SkipBackCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void FullscreenExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            UI.MediaFullscreen mf = new UI.MediaFullscreen(currentImage.FullName, PreviewMedia.Position, settings, db.GetImageTags(data, currentImageName), (PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing ? true : false));
            PreviewMedia.Stop();
            mf.ShowDialog();
            if (mf.Playing)
            {
                PreviewMedia.Play();
                Play.Visibility = Visibility.Hidden;
                Pause.Visibility = Visibility.Visible;
                Pause2.Visibility = Visibility.Visible;
            }
            else
            {
                Play.Visibility = Visibility.Visible;
                Pause.Visibility = Visibility.Hidden;
                Pause2.Visibility = Visibility.Hidden;
            }
            PreviewMedia.Position = mf.Returnposition;
            Volume.Value = mf.VolumeOut;
            
        }

        private void FullscreenCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && MediaIsVideo)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void VolumeUpExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            double currentvolume = Volume.Value;
            double newvolume = currentvolume + 5;
            if (newvolume > 100)
            {
                newvolume = 100;
            }
            Volume.Value = newvolume;
        }

        private void VolumeUpCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && mediaopened)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void VolumeDownExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            double currentvolume = Volume.Value;
            double newvolume = currentvolume - 5;
            if(newvolume < 0)
            {
                newvolume = 0;
            }
            Volume.Value = newvolume;
        }

        private void VolumeDownCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && mediaopened)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void MuteExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            if (PreviewMedia.IsMute)
            {
                PreviewMedia.IsMute = false;
            }
            else
            {
                PreviewMedia.IsMute = true;
            }            
        }

        private void MuteCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && mediaopened)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        #endregion

            #region EventCommands
        private void EventExecuted(object sender, RoutedEventArgs e)
        {
            Button jack = (Button)sender;
            for (int videoevent = 0; videoevent <= EventControls.Children.Count - 1; videoevent++)
            {
                if (EventControls.Children[videoevent] == jack)
                {
                    EventIndex = videoevent;
                    break;
                }
            }
            EventKey(EventIndex);
        }

        private void EventCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event1Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 0;
            EventKey(EventIndex);
        }

        private void Event1CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event2Executed(object sender, ExecutedRoutedEventArgs e)
            {
            EventIndex = 1;
            EventKey(EventIndex);
        }

        private void Event2CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event3Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 2;
            EventKey(EventIndex);
        }

        private void Event3CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event4Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 3;
            EventKey(EventIndex);
        }

        private void Event4CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event5Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 4;
            EventKey(EventIndex);
        }

        private void Event5CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event6Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 5;
            EventKey(EventIndex);
        }

        private void Event6CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event7Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 6;
            EventKey(EventIndex);
        }

        private void Event7CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event8Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 7;
            EventKey(EventIndex);
        }

        private void Event8CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event9Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 8;
            EventKey(EventIndex);
        }

        private void Event9CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event10Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 9;
            EventKey(EventIndex);
        }

        private void Event10CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event11Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 10;
            EventKey(EventIndex);
        }

        private void Event11CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void Event12Executed(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex = 11;
            EventKey(EventIndex);
        }

        private void Event12CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void NextEventExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex++;
            if(EventIndex > EventList.Count - 1)
            {
                EventIndex = EventList.Count - 1;
            }
            else
            {
                EventKey(EventIndex);
            }            
        }

        private void NextEventCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void PrevEventExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            EventIndex--;
            if(EventIndex < 0)
            {
                EventIndex = 0;
            }
            else
            {
                EventKey(EventIndex);
            }            
        }

        private void PrevEventCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && PreviewMedia.State == Meta.Vlc.Interop.Media.MediaState.Playing)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        #endregion

            #region ToolsCommands
        private void HideNavigationExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            Hidenav(false);
        }

        private void HideNavigationCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void OptionsExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            Settings Prefs = new Settings(data);
            Prefs.ShowDialog();
            if (Prefs.Deleted)
            {
                if (Prefs.DeletedDefaultProfile)
                {
                    if (Prefs.DeletedOnlyProfile)
                    {
                        if (File.Exists(Prefs.DeletedDatabasepath))
                        {
                            closewithoutsaving = true;
                            //File.Delete(Prefs.deletedDatabasepath);
                            //File.Delete(Prefs.deletedDatabasepath.Replace(".mdf", ".ldf"));
                            File.Delete(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), "Tagger", "taggersettings.xml"));
                            this.Close();
                            return;
                        }
                    }
                    else
                    {
                        Save();
                        LoadProfile();
                        //if (File.Exists(Prefs.deletedDatabasepath))
                        //{
                        //    File.Delete(Prefs.deletedDatabasepath);
                        //    File.Delete(Prefs.deletedDatabasepath.Replace(".mdf", ".ldf"));
                        //}
                    }

                }
                else
                {
                    if (File.Exists(Prefs.DeletedDatabasepath))
                    {
                        File.Delete(Prefs.DeletedDatabasepath);
                        File.Delete(Prefs.DeletedDatabasepath.Replace(".mdf", ".ldf"));
                    }
                }
                UpdateProfs();
            }
            settings = Prefs.Savesettings;
            LoadSettings();
        }

        private void OptionsCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void FileTagManagerExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            TagManager TM = new TagManager(currentImageName, db, data);
            TM.ShowDialog();
            UpdateTagDisplay();
        }

        private void FileTagManagerCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void AllTagManagerExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            TagManager ATM = new TagManager(db, data);
            ATM.ShowDialog();
            UpdateTagDisplay();
            TagAdd.Focus();
        }

        private void AllTagManagerCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void OpenFileListExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            UI.MediaList ML = new UI.MediaList(FI);
            ML.ShowDialog();
            if (ML.FileName != null)
            {
                if (ML.FileName != "")
                {
                    ImageHistory.Push(currentImageIndex);
                    currentImageIndex = FI.IndexOf(FI.Where(x => x.Name == ML.FileName).First());
                    cycleVideo = false;
                    UpdateImage();
                    UpdateTagDisplay();
                    TagAdd.Focus();
                }
            }
        }

        private void OpenFileListCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void AllSlideshowExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            SlideShow ss = new SlideShow(new string[0], currentprofile, data, settings);
            ss.ShowDialog();
            if(ss.ReturnFile != "")
            {
                ImageHistory.Push(currentImageIndex);
                currentImageIndex = FI.IndexOf(FI.Where(x => x.Name == ss.ReturnFile).First());
                cycleVideo = false;
                UpdateImage();
                UpdateTagDisplay();
                TagAdd.Focus();
            }
        }

        private void AllSlideshowCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void TagSearchExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            UI.SearchResults SR = new UI.SearchResults(db, data, settings, currentprofile, SearchResults);
            SR.ShowDialog();
            if (SR.SearchResultsField.Count > 0)
            {
                SearchResults = SR.SearchResultsField;
            }
            if (SR.ReturnFile != "")
            {
                ImageHistory.Push(currentImageIndex);
                currentImageIndex = FI.IndexOf(FI.Where(x => x.Name == SR.ReturnFile).First());
                cycleVideo = false;
                UpdateImage();
                UpdateTagDisplay();
                TagAdd.Focus();
            }
        }

        private void TagSearchCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void BulkTagExecuted(object sender, ExecutedRoutedEventArgs e)
        {

        }

        private void BulkTagCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void HelpExecuted(object sender, ExecutedRoutedEventArgs e)
        {

        }

        private void HelpCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        #endregion

            #region IQDBCommands
        private async void SearchOnIQDBExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            if(videoTypes.Contains(currentImage.Extension) || currentImage.Extension == ".gif")
            {
                MessageBox.Show("Cannot search booru for gifs or videos.");
            }
            else
            {
                IIqdbClient api = new IqdbClient();
                IqdbApi.Models.SearchResult searchResults;
                using (var fs = new FileStream(DirectoryPath + @"\" + currentImageName, FileMode.Open))
                {
                    searchResults = await api.SearchFile(fs);
                }
                if (!searchResults.IsFound)
                {
                    MessageBox.Show("Image was not found on any booru");
                }
                else
                {
                    Iqdb_Results IR = new Iqdb_Results(searchResults, db, data, imagetagged, currentImageName, DirectoryPath, currentImageHeight, currentImageWidth, currentImage, currentImageIndex);
                    IR.ShowDialog();
                    if (IR.Tagged)
                    {
                        ImagesTaggedCurrentRun += 1;
                        DirectoryProgress.Value = ImagesTaggedfromCurrentDirectory + ImagesTaggedCurrentRun;
                        DirectoryProgress.Tag = (ImagesTaggedfromCurrentDirectory + ImagesTaggedCurrentRun).ToString() + "/" + FI.Count.ToString();
                    }
                    UpdateTagDisplay();
                }
            }            
        }

        private void SearchOnIQDBCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void LoopIQDBExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            if ((currentImageHeight >= 7500 & currentImageWidth >= 7500) || currentImage.Length > 8324000)
            {
                NextIQDB();
            }
            else
            {
                IQDBSearch();
            }
        }

        private void LoopIQDBCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && !IQDBLoopRunning)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void StopIQDBLoopExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            IQDBLoopRunning = false;
            IQDBTimer.Stop();
        }

        private void StopIQDBLoopCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target && IQDBLoopRunning)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        #endregion

            #region DatabaseCommands
        private void DatabseExportExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            db.ExportDatabase(data);
            MessageBox.Show("Complete");
        }

        private void DatabaseExportCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void DatabaseImportExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            string ImportData;
            string[] DataLines;
            string[] LineColumns;
            List<string[]> DatabaseImportRows = new List<string[]>();
            int[] TableStartPositions = new int[] { 0, 0, 0 };

            UI.ImportDatabase ID = new UI.ImportDatabase(DirectoryPath);
            ID.ShowDialog();
            if (!ID.Canceled)
            {
                using (StreamReader reader = new StreamReader(ID.ImportFile))
                {
                    ImportData = reader.ReadToEnd();
                }
                DataLines = ImportData.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                for (int a = 0; a <= DataLines.Length - 1; a++)
                {
                    LineColumns = DataLines[a].Split(new string[] { "||" }, StringSplitOptions.None);
                    switch (LineColumns[0])
                    {
                        case "ImageData":
                            TableStartPositions[0] = a;
                            break;
                        //case "ImageTags":
                        //    TableStartPositions[1] = a;
                        //    break;
                        case "Tags":
                            TableStartPositions[1] = a;
                            break;
                        default:
                            break;
                    }
                    DatabaseImportRows.Add(LineColumns);
                }
                db.ImportDatabase(data, DatabaseImportRows, TableStartPositions, ID.SelectedDirectory);
                ImagesTaggedfromCurrentDirectory = db.GetImageTaggedCount(data, DirectoryPath);
                DirectoryProgress.Value = ImagesTaggedfromCurrentDirectory;
                DirectoryProgress.Tag = (ImagesTaggedfromCurrentDirectory).ToString() + "/" + FI.Count.ToString();
                MessageBox.Show("Complete");
            }
        }

        private void DatabaseImportCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void DatabaseFlushExecuted(object sender, ExecutedRoutedEventArgs e)
        {

        }

        private void DatabaseFlushCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        #endregion

            #region WindowCommands
        private void MinimizeExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            Application.Current.MainWindow.WindowState = WindowState.Minimized;
            e.Handled = true;
        }

        private void MinimizeCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        private void CloseExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            this.Close();
        }

        private void CloseCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Source is Control target)
            {
                e.CanExecute = true;
            }
            else
            {
                e.CanExecute = false;
            }
        }

        #endregion

        #endregion        

        #region IQDB

        private void IQDB_Tick(object sender, EventArgs e)
        {
            IQDBTimer.Stop();
            IQDBTimer.Interval = new TimeSpan(0, 0, 15);
            //Check if still waiting for results
            if (waitingforresults)
            {
                IQDBTimer.Start();
            }
            else
            {
                NextIQDB();
            }
            //Move to next Image
            //check if image is media if so go to next image if not call IQDBSearch();
        }

        private void NextIQDB()
        {
            currentImageIndex++;
            if (currentImageIndex > FI.Count - 1)
            {
                IQDBTimer.Stop();
            }
            else
            {
                cycleVideo = false;
                UpdateImage();
                UpdateTagDisplay();
                if (videoTypes.Contains(currentImage.Extension))
                {
                    NextIQDB();
                }
                else if ((currentImageHeight >= 7500 & currentImageWidth >= 7500) || currentImage.Length > 8324000)
                {
                    NextIQDB();
                }
                else
                {
                    //Thread.Sleep(1000);
                    IQDBSearch();
                }

            }
        }

        private async void IQDBSearch()
        {
            IQDBLoopRunning = true;
            bool BetterOnBooru = false;
            try
            {
                //Start Timer
                if (currentImage.Extension == ".gif")
                {
                    IQDBTimer.Interval = new TimeSpan(0, 0, 5);
                }
                else
                {
                    IQDBTimer.Interval = new TimeSpan(0, 0, 15);
                }
                IQDBTimer.Start();
                waitingforresults = true;                
                int Booruumatch = -1;
                Writelog(currentImageIndex.ToString() + ": " + currentImageName + ":");
                using (var fs = new FileStream(DirectoryPath + @"\" + currentImageName, FileMode.Open))
                {
                    searchResults = await api.SearchFile(fs);
                }
                if (!searchResults.IsFound)
                {

                    Writelog("Not on Booru");
                }
                else
                {
                    for (int r = 0; r <= searchResults.Matches.Count - 1; r++)
                    {
                        if (searchResults.Matches[r].Source == IqdbApi.Enums.Source.SankakuChannel)
                        {
                            Booruumatch = r;
                            break;
                        }
                    }
                    if (Booruumatch == -1)
                    {
                        Writelog("Not on Sankaku");
                    }
                    else if (searchResults.Matches[Booruumatch].Similarity < IQDBscoreQualifier)
                    {
                        Writelog("Sankaku Score Too Low");
                    }
                    else
                    {
                        Writelog("Http:" + searchResults.Matches[Booruumatch].Url);
                        if (currentImageHeight < searchResults.Matches[Booruumatch].Resolution.Height || currentImageWidth < searchResults.Matches[Booruumatch].Resolution.Width)
                        {
                            BetterOnBooru = true;
                        }
                        else
                        {
                            BetterOnBooru = false;
                        }
                        db.UpdateBooruInfo(data, currentImageName, "Http:" + searchResults.Matches[Booruumatch].Url, BetterOnBooru, Convert.ToInt32(searchResults.Matches[Booruumatch].Similarity));
                        if (searchResults.Matches[Booruumatch].Tags.Count > 1)
                        {
                            for (int y = 0; y <= searchResults.Matches[Booruumatch].Tags.Count - 1; y++)
                            {
                                AddTag(searchResults.Matches[Booruumatch].Tags[y].Replace('_', ' ').Replace('|', 'l').Replace(Environment.NewLine, ""));
                            }

                            Writelog("Added " + searchResults.Matches[Booruumatch].Tags.Count.ToString() + " Tags!");
                        }
                        else
                        {
                            AddTag("");
                        }
                        UpdateTagDisplay();

                    }
                }
            }
            catch (Exception e)
            {
                IQDBTimer.Stop();
                Writelog(currentImageName + ":");
                Writelog("Web Exception: " + e.Message);
                //waitingforresults = false;
                //IQDBSearch();
            }
            waitingforresults = false;
        }

        private void Writelog(string text)
        {

            using (StreamWriter writestuff = File.AppendText(@"C:\Users\Chris\Downloads\Log.txt"))
            {
                writestuff.WriteLine(text);
            }
        }

        #endregion

        private void Goto_Click(object sender, RoutedEventArgs e)
        {
            if (ToNum.Text != "")
            {
                try
                {
                    if (int.TryParse(ToNum.Text, out int outparse))
                    {
                        if (outparse < FI.Count - 1 && outparse > 0)
                        {
                            ImageHistory.Push(currentImageIndex);
                            currentImageIndex = outparse - 1;
                            cycleVideo = false;
                            ToNum.Text = "";
                            UpdateImage();
                            UpdateTagDisplay();
                            TagAdd.Focus();
                        }
                    }
                    else
                    {
                        int cntr = 0;
                        foreach (FileInfo g in FI)
                        {
                            cntr++;
                            if (g.Name == ToNum.Text || g.Name.Replace(g.Extension, "") == ToNum.Text)
                            {
                                ImageHistory.Push(currentImageIndex);
                                currentImageIndex = cntr - 1;
                                cycleVideo = false;
                                ToNum.Text = "";
                                UpdateImage();
                                UpdateTagDisplay();
                                TagAdd.Focus();
                            }
                        }
                    }
                }
                catch (Exception)
                {

                }
            }
        }

        private void Hidenav(bool force)
        {
            if (force)
            {
                MainDisplay.RowDefinitions[2].Height = new GridLength(0);
                NavButtons.Visibility = Visibility.Collapsed;
                HideNav.Header = "Show Navigation Buttons";
            }
            else
            {
                if (NavButtons.Visibility == Visibility.Collapsed)
                {
                    MainDisplay.RowDefinitions[2].Height = new GridLength(1, GridUnitType.Star);
                    NavButtons.Visibility = Visibility.Visible;
                    HideNav.Header = "Hide Navigation Buttons";
                }
                else
                {
                    MainDisplay.RowDefinitions[2].Height = new GridLength(0);
                    NavButtons.Visibility = Visibility.Collapsed;
                    HideNav.Header = "Show Navigation Buttons";
                }
            }

        }

        private void GrabCurrentPosition_Click(object sender, RoutedEventArgs e)
        {
            EventPosition.Text = PreviewMedia.Position.ToString();
        }

        private void AddEvent_Click(object sender, RoutedEventArgs e)
        {
            if (EventName.Text == "" || EventPosition.Text == "")
            {
                MessageBox.Show("An event needs a name and a position");
            }
            else
            {
                AddEvent();
            }
        }

        private void EventName_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                if (EventName.Text == "" || EventPosition.Text == "")
                {
                    MessageBox.Show("An event needs a name and a position");
                }
                else
                {
                    AddEvent();
                }
            }
        }

        private void EventKey(int eventindex)
        {
            if (eventindex <= EventControls.Children.Count - 1 && eventindex >= 0)
            {
                if (eventindex <= EventList.Count - 1)
                {
                    PreviewMedia.Position = EventList[eventindex];
                }
            }
        }

        private void Urlbutt_Clicked(object sender, RoutedEventArgs e)
        {
            Button Link = (Button)sender;
            System.Diagnostics.Process.Start(Link.Content.ToString());
        }

        private void Calendar_SelectedDatesChanged(object sender, SelectionChangedEventArgs e)
        {
            if (!updatingmedia)
            {
                var j = FI.Where(x => x.LastWriteTime.ToShortDateString() == Calendar.SelectedDate.Value.ToShortDateString());
                if (j.Count() > 0)
                {
                    ImageHistory.Push(currentImageIndex);
                    currentImageIndex = FI.IndexOf(j.First());
                    cycleVideo = false;
                    UpdateImage();
                    UpdateTagDisplay();
                    TagAdd.Focus();
                }
                CalPopUp.IsSubmenuOpen = false;
            }
        }

        private void Save()
        {
            if (!closewithoutsaving)
            {
                db.SaveState(data, currentprofile, DirectoryPath, currentImageName);
                xml.SaveFile(settings, currentprofile);
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            Save();
            db.DisconnectFromDatabase(data);
        }

        private void ClearDatabase_Click(object sender, RoutedEventArgs e)
        {
            db.DeleteImageData(data, currentImageName);
            UpdateTagDisplay();
            TagAdd.Focus();
        }
    }
}
